
Message durability
(1)mark both the queue and messages as durable
(2)mark our messages as persistent - by supplying a delivery_mode

Note on message persistence
If you need a stronger guarantee then you can use publisher confirms.

Fair dispatch
RabbitMQ just dispatches a message when the message enters the queue.
It doesn't look at the number of unacknowledged messages for a consumer.
It just blindly dispatches every n-th message to the n-th consumer.

In order to defeat that we can use the basic.qos method with the prefetch_count=1 setting.

This tells RabbitMQ not to give more than one message to a worker at a time.
in other words, don't dispatch a new message to a worker until it has processed and
acknowledged the previous one. Instead, it will dispatch it to the next worker that is
not still busy.

Note about queue size
If all the workers are busy, your queue can fill up.
You will want to keep an eye on that, and maybe add more workers, or use message TTL.


